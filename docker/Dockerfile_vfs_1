FROM nvidia/cuda:10.1-cudnn7-runtime-ubuntu18.04

WORKDIR /workspace

ARG DEBIAN_FRONTEND=noninteractive
ENV TZ=US/Pacific

RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    curl \
    g++ \
    wget \
    bzip2 \
    git \
    vim \
    tmux \
    htop \
    git \
    zip \
    unzip \
    ca-certificates \
    libosmesa6-dev \
    libgl1-mesa-glx \
    libglfw3 \
    patchelf \
    libglu1-mesa \
    libxext6 \
    libxtst6 \
    libxrender1 \
    libxi6 \
    libjpeg-dev \
    libpng-dev \
    libopenblas-dev \
    libopencv-dev \
    libyaml-dev \
    libavformat-dev \
    libavcodec-dev \
    libswscale-dev \
    libavutil-dev \
    libavfilter-dev \
    libavdevice-dev \
    libswresample-dev \
    less \
    groff \
    memcached \
    s3cmd && \
    ln -s /usr/lib/x86_64-linux-gnu/libGL.so.1 /usr/lib/x86_64-linux-gnu/libGL.so

RUN apt-get clean && rm -rf /var/lib/apt/lists/*

RUN curl https://rclone.org/install.sh | bash

# Set timezone
RUN ln -sf /usr/share/zoneinfo/US/Pacific /etc/localtime

# Get Conda-ified Python.
RUN echo 'export PATH=/opt/conda/bin:$PATH' > /etc/profile.d/conda.sh && \
    wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh && \
    sh ~/miniconda.sh -b -p /opt/conda && \
    rm ~/miniconda.sh

ENV PATH /opt/conda/bin:$PATH

# Set CUDA_ROOT
RUN export CUDA_HOME="/usr/local/cuda"

# Install some useful packages
RUN conda install -y conda=4.8.5 python=3.6.2 && conda clean -ay && \
    conda install -y mkl=2020.1 && \
    conda install -y numpy scipy scikit-learn scikit-image imageio protobuf && \
    conda install -y ruamel.yaml==0.16.10 && \
    # ruamel_yaml is a copy of ruamel.yaml package
    # conda installs version ruamel_yaml v0.15.87 which is vulnerable
    # force uninstall it leaving other packages intact
    #conda remove --force -y ruamel_yaml && \
    conda clean -ay 
    # Install AzureML SDK
    #${PIP} azureml-defaults && \
    # Install PyTorch
    #${PIP} torch==1.4.0 && \
    #${PIP} torchvision==0.2.1 && \
    #${PIP} wandb && \
    # # Install Horovod
    # HOROVOD_WITH_PYTORCH=1 ${PIP} horovod[pytorch]==0.19.5 && \
    # ldconfig && \
    #${PIP} tensorboard==1.15.0 && \
    #${PIP} future==0.17.1 && \
    #${PIP} onnxruntime==1.4.0 && \
    #${PIP} pytorch-lightning && \
    #${PIP} opencv-python-headless~=4.4.0 && \
    #${PIP} imgaug==0.4.0 --no-deps && \
    # hydra
    #${PIP} hydra-core --upgrade && \
    #${PIP} lmdb pyarrow


# Install pytorch
RUN pip install torch==1.8.1+cu111 torchvision==0.9.1+cu111  -f https://download.pytorch.org/whl/torch_stable.html
#RUN pip install pytorch==1.8.0 torchvision==0.9.0 cudatoolkit=11.1 -c pytorch
#RUN conda install pytorch=1.6.0 torchvision cudatoolkit=10.1 -c pytorch
RUN pip install simplejson psutil opencv-python tensorboard
RUN conda install av -c conda-forge
RUN conda install -c conda-forge moviepy

# Install some commands
RUN pip3 install --upgrade pip
RUN pip3 install pipreqs

RUN apt-get update
RUN apt-get install -y --no-install-recommends libglib2.0-dev
RUN apt-get install -y --no-install-recommends vim           

RUN apt-get install -y --no-install-recommends htop
RUN apt-get install -y --no-install-recommends net-tools
RUN apt-get install -y --no-install-recommends rsync
RUN apt-get install -y --no-install-recommends tree
# Install azcopy

RUN  wget -O azcopy.tar.gz https://aka.ms/downloadazcopylinux64
RUN tar -xf azcopy.tar.gz
RUN ./install.sh



# Install decord
#RUN git clone --recursive https://github.com/dmlc/decord
#RUN cd decord && mkdir build && cd build && cmake .. -DUSE_CUDA=0 && make && cd ../python && python setup.py install
RUN pip install decord==0.4.2

# Install MMCV
#RUN pip install mmcv-full==1.2.1+torch1.6.0+cu101 -f https://openmmlab.oss-accelerate.aliyuncs.com/mmcv/dist/index.html
RUN pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/cu111/torch1.8.0/index.html
# Install Kornia
#RUN pip install kornia
RUN pip install git+https://github.com/kornia/kornia

# Install DAVIS
RUN git clone https://github.com/xvjiarui/davis2017-evaluation.git
RUN pip install Cython
RUN cd davis2017-evaluation && python setup.py develop

# Install zsh
RUN sh -c "$(wget -O- https://github.com/deluan/zsh-in-docker/releases/download/v1.1.1/zsh-in-docker.sh)" -t robbyrussell -p git

# install customized evaluation API for DAVIS
RUN pip install git+https://github.com/xvjiarui/davis2017-evaluation
# install evaluation API for OTB
RUN pip install got10k

# install VFS
RUN git clone https://github.com/xvjiarui/VFS/
RUN cd ./VFS
RUN ls
RUN pip install -e ./VFS/.

